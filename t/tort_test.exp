
tort debugger:
rcvr = !object @0@0x1
backtrace =   !message { __debugger !object @0@0x1 !method __debugger @0@0x2}


  nil => nil
  123 => 123
  _mt_map => !map { initialize => !method initialize @0@0x1, get => !method get @0@0x2, get_key => !method get_key @0@0x3, set => !method set @0@0x4, delete => !method delete @0@0x5, clone => !method clone @0@0x6, size => !method size @0@0x7, write => !method write @0@0x8, lisp_write => !method lisp_write @0@0x9 }
  (v = "new") =>"new"
  (get symbols "new") => new
  (clone v) => "new"
  (size v) => 3
  (alloc_size v) => 3
  (get v 2) => 101
  (set v 2 +1) => "nfw"
  symbols => !map { "new" => new, "clone" => clone, "lookup" => lookup, "apply" => apply, "get" => get, "get_key" => get_key, "set" => set, "value" => value, "true" => true, "false" => false, "size" => size, "alloc_size" => alloc_size, "each" => each, "map" => map, "initialize" => initialize, "delete" => delete, "create" => create, "open" => open, "popen" => popen, "close" => close, "read" => read, "write" => write, "printf" => printf, "eof" => eof, "error" => error, "lisp_write" => lisp_write, "backtrace" => backtrace, "backtrace_size" => backtrace_size, "_name" => _name, "__debugger" => __debugger, "__message" => __message, "car" => car, "set-car!" => set-car!, "cdr" => cdr, "set-cdr!" => set-cdr!, "list->vector" => list->vector, "lisp_read" => lisp_read, "." => . }
read up to 64 chars from popen("echo 12345", "r") => "12345
"
  (eof o) => 1
  (size v) => 6
  (alloc_size v) => 64


read up to 64 chars from popen("echo 12345", "r") => "12345
"
  (eof o) => 1
  (size v) => 6
  (alloc_size v) => 64

o => !map {  }
(size o) => 0
o => !map { 1 => 2 }
(size o) => 1
o => !map { 1 => 3 }
(size o) => 1
o => !map { 1 => 3, 3 => 4 }
(size o) => 2
o => !map { 3 => 4 }
(size o) => 1

Some object ==> ( nil ) <== is in here!
  in each 0@0x1[1] => nil
  in each 0@0x1[2] => nil
  in each 0@0x1[3] => nil
  in each 0@0x1[4] => nil
  in each 0@0x1[5] => nil
  in each 0@0x1[6] => nil
  in each 0@0x1[7] => nil
  in each 0@0x1[8] => nil
  in each 0@0x1[9] => nil
  in each 0@0x1[10] => nil
v = !vector { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
v as lisp object = #(0 1 2 3 4 5 6 7 8 9)
read lisp object from stdin: (read o) => #e
