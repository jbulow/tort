
tort - Tiny Object RunTime

Inspired by Ian Piumarta's work on idst and other small runtimes.

Core is under 2000 lines of uncommented C.

Supports:

* Primitive object types.
** String.
** Symbol.
** Method.
** Method table.
** Tagged integer.
** Vector.
** Pair.
** Map.
** IO with FILE* and finalization.
* Dynamic message dispatch.
** ~50,000,000 send/sec on OS X 64-bit using a global method cache.
** global method cache montors for invalidations due to:
*** New method definitons using symbol version counters.
*** Changes in lookup() meta-send protocol method.
*** Changes in method table delegation.
* Meta-send protocol:
** Decomposed into lookup(message, rcvr, ...), apply(message, rcvr, ...).
** Fully recursive lookup() delegation.
** Message objects allocated on C stack.
* Can be linked against BDW GC library.
* Configurable.

Extensions are dynamically loaded:

* Dynamic library loading with automatic initialization, method discovery and installation.
* Example Extension Library.
** LISP primitives.
*** Conses.
*** Lisp reader.
*** Lisp writer.
*** Lisp evaluator (prototype).
** Lexical blocks using GCC nested functions.
** Fibers using setjmp and mmap().
** Object graphing using graphviz/dot.
