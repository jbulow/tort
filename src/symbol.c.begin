/* -*- c -*- */
#include "tort/core.h"

/********************************************************************/

tort_v tort_symbol_make(const char *string)
{
  if ( string ) {
    tort_map_entry *e = _tort_m_map__get_entry_cstr(tort_thread_arg tort_(symbols), string);
    if ( e ) {
      // fprintf(stderr, "\n old symbol = %s %p\n", tort_symbol_data(e->value), (void *) e->value);
      return e->value;
    } else {
      tort_v key, value;
      key = tort_string_new_cstr(string);
      value = tort_allocate(0, 0, sizeof(tort_symbol), tort__mt(symbol));
      tort_ref(tort_symbol, value)->name = key;
      tort_ref(tort_symbol, value)->version = tort_i(0);
      _tort_m_map__add(tort_thread_arg tort_(symbols), key, value);
      // fprintf(stderr, "\n new symbol = %s %p\n", tort_symbol_data(value), (void *) value);
      return value;
    } 
  } else {
    tort_v value;
    value = tort_allocate(0, 0, sizeof(tort_symbol), tort__mt(symbol));
    tort_ref(tort_symbol, value)->name = tort_nil;
    tort_ref(tort_symbol, value)->version = tort_i(0);
    return value;
  }
}


tort_v tort_runtime_initialize_symbol()
{

