(let ()
  (define-struct environ
    (parent           #f)
    (alloc-env        #f)
    (alloc-offset     0)
    (alloc-offset-max 0)
    (closure         #f)
    (bindings      ('new <map>))
    (macros        ('new <map>))
    (_global        #f)
    )
  (define-method environ ('lisp_write self port)
    (display "#<environ " port)
    (write ('keys ('bindings self)) port)
    (display " >" port)
    )
  (define-method environ ('add self binding)
    ('set ('bindings self) ('name binding) binding)
    ('env= binding self)
    binding)
  (define-method environ ('binding-list self)
    (vector->list ('values ('bindings self))))
  (define-method environ ('lookup self name)
    (let ((b ('get ('bindings self) name)))
      (if (and (null? b) ('parent self))
	('lookup ('parent self) name))
      b))
  (define-method environ ('lookup-or-add-global self name)
    (let ((b ('lookup self name)))
      (if (null? b)
	('add ('global self) ('new env-binding 'name name))
	b)))
  (define-method environ ('global self)
    (or ('_global self) self))
  (define-method environ ('subenv self)
    (let ((env ('new environ 'parent self 'alloc-env self))) ;; 'loc ???
      ('_global= env ('global self))
      env))

  (define-struct env-binding
    (name        #f)
    (env         #f)
    (referenced? #f)
    (set?        #f)
    (loc         #f)
    (type        #f)
    (size        #f)
    (reg         #f)
    (rest-arg    #f)
    (restore-reg #f)
    (closed-over #f)
    (exported    #f)
    )
)
