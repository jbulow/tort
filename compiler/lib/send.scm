(let* ( 
	(arg-regs     '#(%rdi %rsi %rdx %rcx %r8 %r9))
	(rtn          '(&r %rax))
	(arg0         rtn)
	(arg1         `(&r ,(vector-ref arg-regs 1)))
	(arg2         `(&r ,(vector-ref arg-regs 2)))
	(word-size  (send 'get &root 'word_size))
	(tag-bits   (send 'get &root 'tag_bits))
	(object-header-size (send 'get &root 'object_header_size))
	(<message>-alloc-size (+ object-header-size (send 'instance_size <message>)))
	(class-slot-offset (lambda (class slot) (send 'offset (send 'get (send 'slots class) slot))))
	(<message>->selector (class-slot-offset <message> 'selector))
	(<message>->receiver (class-slot-offset <message> 'receiver))
	(<message>->previous_message  (class-slot-offset <message> 'previous_message))
	(<message>->method   (class-slot-offset <message> 'method))
	(<message>->mtable   (class-slot-offset <message> 'mtable))
	(<message>->argc     (class-slot-offset <message> 'argc))
	(<method>->applyf    (- word-size))
	(&I (lambda (x) (>> x tag-bits)))
       )
 
  (define-macro (&send sel rcvr . args)
    (let ((msg (make-symbol #f)))
      `(let ((,msg (&stack-alloc ,<message>-alloc-size)))
	 (set! ,msg (&&+ ,msg ,(&I object-header-size)))
	 (set! (&o ,<message>->selector ,msg) ,sel)
	 (set! (&o ,<message>->receiver ,msg) ,rcvr)
	 (set! (&o ,<message>->mtable ,msg) (&I 0))
	 (set! (&o ,<message>->previous_message ,msg) &msg)
	 (set! (&o ,<message>->argc ,msg) ,(+ (list-length args) 1)) 
	 (set! ,msg (&c (&extern tort_lookup) &msg ,msg))
	 (&c (&o ,<method>->applyf (&o ,<message>->method ,msg)) ,@args)
	 )))
)

